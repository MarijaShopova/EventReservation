@model EventReservation.Models.Event
@{
    ViewBag.Title = "Create";
}
@Scripts.Render("~/bundles/Jquery")

<script src="~/Scripts/multistep-form.js"></script>
<link href="~/Css/multistep-form.css" rel="stylesheet" />
<link href="~/Content/fontawesome-all.css" rel="stylesheet" />
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<link href="~/Content/timepicki.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-1.12.4.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="~/Content/timepicki.js"></script>
<style>
    select {
        margin-left: 42px;
    }
    .first {
        width: 80%;
        margin: auto;
    }

        .first .btn {
            width: 40%;
        }

    .second {
        width: 88%;
        margin: auto;
    }

        .second .btn {
            width: 100%;
        }
</style>


@using (Html.BeginForm("Edit", "Events", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal form py-5 container content main">
        <div style="margin-left:80px;">
            <ul class="progressbar">
                <li id="active1" class="li-multistep"><span><i class="fa fa-glass-martini text-imperial pr-2"></i></span></li>
                <li id="active2" class="li-multistep"><span><i class="fa fa-glass-martini  pl-2 pr-2"></i></span></li>
                <li id="active3" class="li-multistep"><span><i class="fa fa-glass-martini  fa-1x pl-2"></i></span></li>
            </ul>
            <ul class="progressbar1">
                <li class="li-multistep"><span class="li-text">General Info</span></li>
                <li class="li-multistep"><span class="li-text" style="margin-left:-30px;">Time & Date</span></li>
                <li class="li-multistep"><span class="li-text" style="margin-left:-37px;">Additional Info</span></li>
            </ul>
        </div>
        <div style="margin-top: -25px; margin-left: auto;">

            <fieldset id="first" style="width:500px;">
                <h5 class="title">General Details</h5>
                @Html.Hidden("LocalId", (object)ViewBag.LocalId)
           
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "label-text" })
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control cust-width", @id = "title" } })
                        <p id="TitleH"></p>

                    </div>
                </div>
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "label-text" })
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control cust-width", @id = "description" } })
                        <p id="DescriptionH"></p>
                    </div>
                </div>
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group mb-0">
                        @Html.LabelFor(model => model.Genre, htmlAttributes: new { @class = "label-text" })
                        <div style="width: 81%">
                            @Html.DropDownListFor(model => model.Genre, new SelectList(ViewBag.genres), new { htmlAttributes = new { @class = "form-control", @id = "genre" } })
                        </div>
                        <p id="BandH" class="pb-0 mb-0"></p>
                    </div>
                </div>
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Performer, htmlAttributes: new { @class = "label-text" })
                        @Html.EditorFor(model => model.Performer, new { htmlAttributes = new { @class = "form-control cust-width", @id = "performer" } })
                        <p id="PerformerH"></p>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.NoTables, htmlAttributes: new { @class = "label-text mb-2" })
                    @Html.EditorFor(model => model.NoTables, new { htmlAttributes = new { @class = "form-control cust-width", @id = "tables" } })
                    <p id="tableH"></p>
                </div>
                <div class="form-group mt-4 first">
                    <a class="btn pl-3 pr-3 btn-green" href="/Locals/ListEvents">Cancel</a>
                    <input id="next_btn1" onclick="validate_step1()" type="button" value="Next" class="btn pl-3 pr-3 btn-green float-right">
                </div>
            </fieldset>

            <fieldset id="second" style="width:500px;">
                <h5 class="title">Date & Time</h5>
                <div>
                    @Html.LabelFor(model => model.DateStart, htmlAttributes: new { @class = "label-text" })
                    @Html.TextBoxFor(model => model.DateStart, htmlAttributes: new { @Value = Model.DateStart.ToString("dd.MM.yyyy"), @placeholder = "Select date", @id = "datepicker", @class = "cust-width" })
                    <p id="datepickerH"></p>
                </div>
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.TimeStart, htmlAttributes: new { @class = "label-text mb-2" })
                        @Html.EditorFor(model => model.TimeStart, new { htmlAttributes = new { @Value = Model.TimeStart.ToString("HH:mm"), @class = "form-control cust-width cust-border", @id = "start", @placeholder = "hh:mm" } })
                        <p id="startH"></p>
                    </div>
                </div>
                <div>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.TimeEnd, htmlAttributes: new { @class = "label-text mb-2" })
                        @Html.EditorFor(model => model.TimeEnd, new { htmlAttributes = new { @Value = Model.TimeEnd.ToString("HH:mm"), @class = "form-control cust-width cust-border", @id = "end", @placeholder = "hh:mm" } })
                        <p id="endH"></p>
                    </div>
                </div>
                <div class="form-group row second mt-4">
                    <div class="col-4">  <input id="pre_btn1" onclick="prev_step1()" type="button" value="Previous" class="btn pl-3 pr-3 btn-green"></div>
                    <div class="col-4">  <a class="btn pl-3 pr-3 btn-green" href="/Locals/ListEvents">Cancel</a></div>
                    <div class="col-4"><input id="next_btn2" name="next" onclick="validate_step2()" type="button" value="Next" class=" btn pl-3 pr-3 btn-green float-right"></div>
                </div>
            </fieldset>

            <fieldset id="third" style="width:500px;">

                <h5 class="title">Additional Details</h5>
                <div class="pt-3">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.HasTicket, htmlAttributes: new { @class = "label-text cust-width mb-2" })
                        <br />
                        <input type="radio" onclick="handleClick(this);" id="yes" name="HasTicker" class="ml-5" value="Yes" />Yes
                        <input type="radio" onclick="handleClick(this);" checked name="HasTicker" class="ml-3" value="No" />No

                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.TicketPrice, htmlAttributes: new { @class = "label-text cust-width" })
                    <input type="text" id="price" class="form-control cust-width cust-border" name="TicketPrice" disabled>
                </div>
                <div class="form-group pl-5">
                    <span> Current ImageL</span>
                    @if (Model.EventImage == null)
                    {
                        <img src="~/Content/IT_sliki/b52.jpg" style="height: 70px; width: 100px;" class="content-image" />
                    }
                    else
                    {
                        var base64 = Convert.ToBase64String(Model.EventImage);
                        <img src="@string.Format("data:image;base64,{0}", base64)" style="height: 100px; width: 100px;" class="content-image" />

                    }
                </div>
                <div class="form-group pl-5">
                    <span> Change Image:</span>
                    @Html.TextBoxFor(m => m.EventImage, new { type = "file", accept = ".jpg,.jpeg,.png,.bmp,.gif,.tif,.tiff", value = "Change photo" })
                </div>
                <div class="form-group second mt-4 row">
                    <div class="col-4">  <input id="pre_btn1" onclick="prev_step2()" type="button" value="Previous" class="btn pl-3 pr-3 btn-green"></div>
                    <div class="col-4">  <a class="btn pl-3 ml-2 pr-3 btn-green" href="/Locals/ListEvents">Cancel</a></div>
                    <div class="col-4">
                        <input type="submit" class="btn pl-3 ml-2 pr-3 btn-green" value="Save">
                    </div>
                </div>

            </fieldset>

        </div>
    </div>
}

<script type="text/javascript">
    $(function () {
        $("#datepicker").datepicker({ dateFormat: 'dd.mm.yy', minDate: 0 });
        $('#end').timepicki({
            show_meridian: false,
            min_hour_value: 0,
            max_hour_value: 23,
            step_size_minutes: 15,
            increase_direction: 'up',
            start_time: [@Model.TimeEnd.Hour.ToString(), @Model.TimeEnd.Minute.ToString()]
        });
        $('#start').timepicki({
            show_meridian: false,
            min_hour_value: 0,
            max_hour_value: 23,
            step_size_minutes: 15,
            increase_direction: 'up',
            start_time: [@Model.TimeStart.Hour.ToString(), @Model.TimeStart.Minute.ToString()]
        });
    });

    function handleClick(HasTicker) {

        if (HasTicker.value == "Yes") {
            document.getElementById("price").disabled = false;
            document.getElementById("price").focus();
        }
        if (HasTicker.value == "No") {
            document.getElementById("price").disabled = true;

        }
    }
    document.getElementById("active2").style.color = "lightgrey";
    document.getElementById("active3").style.color = "lightgrey";
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
